<?php
/**
 * @file
 * Update and install functions for Spam Bot Blocker.
 */

/**
 * Implementation of hook_schema().
 */
function spam_bot_blocker_schema() {

  $schema['sbbfails'] = array(
    'description' => 'This table holds how many times an IP failed a Spam Bot Blocker CAPTCHA.',
    'fields' => array(
      'id' => array(
      'description' => 'Primary Key for this row',
      'type' => 'serial',
      'unsigned' => TRUE,
      'not null' => TRUE,
      ),
    'form_id' => array(
      'description' => 'The form_id of the form that the IP failed.',
      'type' => 'varchar',
      'length' => 128,
      'not null' => TRUE,
      'default' => '',
      ),
    'ip' => array(
      'description' => 'IP address of the visitor.',
      'type' => 'varchar',
      'length' => 128,
      'not null' => FALSE,
      ),
    ),
    'primary key' => array('id'),
  );

  $schema['sbbdeny'] = array(
    'description' => 'This table holds IPs that failed Spam Bot Blocker CAPTCHA max and are denied to submit a form.',
    'fields' => array(
      'id' => array(
      'description' => 'Primary key for this row',
      'type' => 'serial',
      'unsigned' => TRUE,
      'not null' => TRUE,
      ),
      'ip' => array(
      'description' => 'IP address of the visitor.',
      'type' => 'varchar',
      'length' => 128,
      'not null' => FALSE,
      ),
      'timestamp' => array(
      'description' => "The time this record was entered",
      'type' => 'int',
      'not null' => TRUE,
      'default' => 0,
      ),
    ),
    'primary key' => array('id'),
  );

  $schema['sbbban'] = array(
  'description' => 'This table holds IPs that are permanently banned from submitting forms that have the Spam Bot Blocker CAPTCHA attached.',
  'fields' => array(
    'id' => array(
    'description' => 'Primary key for this row',
    'type' => 'serial',
    'unsigned' => TRUE,
    'not null' => TRUE,
    ),
    'ip' => array(
    'description' => 'IP address of the visitor.',
    'type' => 'varchar',
    'length' => 128,
    'not null' => FALSE,
    ),
    'count' => array(
    'description' => "The number of Major Fails",
    'type' => 'int',
    'not null' => TRUE,
    'default' => 1,
    ),
  ),
  'primary key' => array('id'),
  'unique keys' => array(
  'ip' => array('ip'),
  ),
  );

  return $schema;
} // ===== End Function ===============

/**
 * Implementation of hook_install().
 */
function spam_bot_blocker_install() {
  global $base_path;
  $t = get_t();

  // define the node type
  $new_content_type = array(
    'type' => 'spam_bot_blocker',
    'name' => 'Spam Bot Blocker',
    'base' => 'node_content',
    'module' => 'node',
    'description' => 'a Spam Bot Blocker piece of content for the Spam Bot Blocker Module',
    'help' => '',
    'has_title' => '1',
    'title_label' => 'Spam Bot Blocker - Title',
    'custom' => '1',
    'modified' => '1',
    'locked' => '0',
    'disabled' => '0',
    'orig_type' => 'spam_bot_blocker',
    'disabled_changed' => FALSE,
    'bc_entity_type' => 'node',
  );
// Putting this in the Array didn't work
//'pattern default' => 'content/[node:title]',

  // set other node defaults not declared above
  $content_type = node_type_set_defaults($new_content_type);

  // add the body field
  node_add_body_field($content_type, $t('Body'));

  // save the content type
  node_type_save($content_type);

  /* ***** PathAuto ***** */

	
  /**** Peristant Variables ****/
	/* NOT NEEDED for BackDrop,
	All variables grabbed from config/spam_bot_blocker.settings.json	
	  variable_set('pathauto_node_spam_bot_blocker_pattern', 'spam-bot-blocker/[node:title]');
	*/
	// This didn't work
	//$sbb_path = config_get('spam_bot_blocker.settings','spam_bot_blocker_pattern');
	// $sbb_set = config_set('path.settings.json','spam_bot_blocker_pattern','spam-bot-blocker/[node:title]');
	
	// This works :)
	$sbb_path = 'spam-bot-blocker/[node:title]';
	$config = config('path.settings');
  $config->set('node_spam_bot_blocker_pattern', $sbb_path);
	//$config->setData('spam_bot_blocker_pattern', $sbb_path);
  $config->save();
	
  // add peristant variables that control settings	
  variable_set('additional_settings__active_tab_spam_bot_blocker', 'edit-menu');
  variable_set('comment_spam_bot_blocker', '1');
  variable_set('node_preview_spam_bot_blocker', 0);
  variable_set('node_options_spam_bot_blocker', array(0 => 'status'));
  variable_set('node_submitted_spam_bot_blocker', 0);
  variable_set('menu_options_spam_bot_blocker', array());
  variable_set('menu_parent_spam_bot_blocker', 'main-menu:0');

  
  /**** Fields and Instances ****/

  // create all the fields we are adding to our content type
  foreach (_spam_bot_blocker_installed_fields() as $field) {
  field_create_field($field);
  }

  // create all the instances for our fields
  foreach (_spam_bot_blocker_installed_instances() as $instance) {
  $instance['entity_type'] = 'node';
  $instance['bundle'] = $new_content_type['type'];
  field_create_instance($instance);
  }

  /**** Default Vars ****/

	/* NOT NEEDED for BackDrop,
	All variables grabbed from config/spam_bot_blocker.settings.json	
  variable_set('spam_bot_blocker_fails', 3);
  variable_set('spam_bot_blocker_purge_deny', 300);
  variable_set('spam_bot_blocker_redirect_type', 1);
  variable_set('spam_bot_blocker_redirect', 'http://www.google.com/');
  variable_set('spam_bot_blocker_use_honey', 1);
  variable_set('spam_bot_blocker_honey_name', 'user');
  variable_set('spam_bot_blocker_use_ban', 1);
  variable_set('spam_bot_blocker_max_fails_ban', 3);
  variable_set('spam_bot_blocker_redirect_ban_type', 1);
  variable_set('spam_bot_blocker_redirect_ban', 'http://www.google.com/');
  variable_set('spam_bot_blocker_use_cdn', 2);
  variable_set('spam_bot_blocker_cnd_site_key', '');
  variable_set('spam_bot_blocker_cdn_language', 15);
  variable_set('spam_bot_blocker_expose_errors', 0);
  //variable_set('spam_bot_blocker_cdn_categories', 'any'); // Future possibility
  */
	
	/**** Add Example Content ****/

backdrop_set_message(st('<h3>The "<b>Spam Bot Blocker</b>" Module has been successfully installed.</h3><p>Please review the instruction at "<a href="/admin/config/people/captcha/spam_bot_blocker">Configuration > People > CAPTCHA > Spam Bot Blocker</a>" for detailed instructions.</p><p><span style="color:red;">Note:</span> Although the "Spam Bot Blocker" CDN (see <a href="/admin/config/people/captcha/spam_bot_blocker/help">help</a>) can be used exclusively for challenges, it is a good idea to create a couple of local (on this site) "Spam Bot Blocker" pieces of content (<a href="/node/add/spam-bot-blocker">add "Spam Bot Blocker" content</a>) for "fallback" (if the service is down).</p>'));

} // ===== End Install Function ============


/**
 * Implementation of hook_installed_fields
 */
function _spam_bot_blocker_installed_fields() {
  $t = get_t();

  return array(
    'field_sbb_possible_answers' => array(
      'translatable' => '0',
      'entity_types' => array(),
      'settings' => array(
        'max_length' => '255',
      ),
      'storage' => array(
        'type' => 'field_sql_storage',
        'settings' => array(),
        'module' => 'field_sql_storage',
        'active' => '1',
        'details' => array(
          'sql' => array(
            'FIELD_LOAD_CURRENT' => array(
              'field_data_field_sbb_possible_answers' => array(
                'value' => 'field_sbb_possible_answers_value',
                'format' => 'field_sbb_possible_answers_format',
              ),
            ),
            'FIELD_LOAD_REVISION' => array(
              'field_revision_field_sbb_possible_answers' => array(
                'value' => 'field_sbb_possible_answers_value',
                'format' => 'field_sbb_possible_answers_format',
              ),
            ),
          ),
        ),
      ),
      'foreign keys' => array(
        'format' => array(
          'table' => 'filter_format',
          'columns' => array(
            'format' => 'format',
          ),
        ),
      ),
      'indexes' => array(
        'format' => array(
          0 => 'format',
        ),
      ),
      'field_name' => 'field_sbb_possible_answers',
      'type' => 'text',
      'module' => 'text',
      'active' => '1',
      'locked' => '0',
      'cardinality' => '1',
      'deleted' => '0',
      'columns' => array(
        'value' => array(
          'type' => 'varchar',
          'length' => '255',
          'not null' => FALSE,
        ),
        'format' => array(
          'type' => 'varchar',
          'length' => 255,
          'not null' => FALSE,
        ),
      ),
      'bundles' => array(
        'node' => array(
          0 => 'spam_bot_blocker',
        ),
      ),
    ),
    'field_sbb_correct_answer' => array(
      'translatable' => '0',
      'entity_types' => array(),
      'settings' => array(
        'max_length' => '255',
      ),
      'storage' => array(
        'type' => 'field_sql_storage',
        'settings' => array(),
        'module' => 'field_sql_storage',
        'active' => '1',
        'details' => array(
          'sql' => array(
            'FIELD_LOAD_CURRENT' => array(
              'field_data_field_sbb_correct_answer' => array(
                'value' => 'field_sbb_correct_answer_value',
                'format' => 'field_sbb_correct_answer_format',
              ),
            ),
            'FIELD_LOAD_REVISION' => array(
              'field_revision_field_sbb_correct_answer' => array(
                'value' => 'field_sbb_correct_answer_value',
                'format' => 'field_sbb_correct_answer_format',
              ),
            ),
          ),
        ),
      ),
      'foreign keys' => array(
        'format' => array(
          'table' => 'filter_format',
          'columns' => array(
            'format' => 'format',
          ),
        ),
      ),
      'indexes' => array(
        'format' => array(
          0 => 'format',
        ),
      ),
      'field_name' => 'field_sbb_correct_answer',
      'type' => 'text',
      'module' => 'text',
      'active' => '1',
      'locked' => '0',
      'cardinality' => '1',
      'deleted' => '0',
      'columns' => array(
        'value' => array(
          'type' => 'varchar',
          'length' => '255',
          'not null' => FALSE,
        ),
        'format' => array(
          'type' => 'varchar',
          'length' => 255,
          'not null' => FALSE,
        ),
      ),
      'bundles' => array(
        'node' => array(
          0 => 'spam_bot_blocker',
        ),
      ),
    ),
    'field_sbb_image' => array(
      'translatable' => '0',
      'entity_types' => array(),
      'settings' => array(
        'uri_scheme' => 'public',
        'default_image' => 0,
      ),
      'storage' => array(
        'type' => 'field_sql_storage',
        'settings' => array(),
        'module' => 'field_sql_storage',
        'active' => '1',
        'details' => array(
          'sql' => array(
            'FIELD_LOAD_CURRENT' => array(
              'field_data_field_sbb_image' => array(
                'fid' => 'field_sbb_image_fid',
                'alt' => 'field_sbb_image_alt',
                'title' => 'field_sbb_image_title',
                'width' => 'field_sbb_image_width',
                'height' => 'field_sbb_image_height',
              ),
            ),
            'FIELD_LOAD_REVISION' => array(
              'field_revision_field_sbb_image' => array(
                'fid' => 'field_sbb_image_fid',
                'alt' => 'field_sbb_image_alt',
                'title' => 'field_sbb_image_title',
                'width' => 'field_sbb_image_width',
                'height' => 'field_sbb_image_height',
              ),
            ),
          ),
        ),
      ),
      'foreign keys' => array(
        'fid' => array(
          'table' => 'file_managed',
          'columns' => array(
            'fid' => 'fid',
          ),
        ),
      ),
      'indexes' => array(
        'fid' => array(
          0 => 'fid',
        ),
      ),
      'field_name' => 'field_sbb_image',
      'type' => 'image',
      'module' => 'image',
      'active' => '1',
      'locked' => '0',
      'cardinality' => '1',
      'deleted' => '0',
      'columns' => array(
        'fid' => array(
          'description' => 'The {file_managed}.fid being referenced in this field.',
          'type' => 'int',
          'not null' => FALSE,
          'unsigned' => TRUE,
        ),
        'alt' => array(
          'description' => 'Alternative image text, for the image\'s \'alt\' attribute.',
          'type' => 'varchar',
          'length' => 512,
          'not null' => FALSE,
        ),
        'title' => array(
          'description' => 'Image title text, for the image\'s \'title\' attribute.',
          'type' => 'varchar',
          'length' => 1024,
          'not null' => FALSE,
        ),
        'width' => array(
          'description' => 'The width of the image in pixels.',
          'type' => 'int',
          'unsigned' => TRUE,
        ),
        'height' => array(
          'description' => 'The height of the image in pixels.',
          'type' => 'int',
          'unsigned' => TRUE,
        ),
      ),
      'bundles' => array(
        'node' => array(
          0 => 'spam_bot_blocker',
        ),
      ),
    ),
    'field_sbb_question' => array(
      'translatable' => '0',
      'entity_types' => array(),
      'settings' => array(
        'max_length' => '255',
      ),
      'storage' => array(
        'type' => 'field_sql_storage',
        'settings' => array(),
        'module' => 'field_sql_storage',
        'active' => '1',
        'details' => array(
          'sql' => array(
            'FIELD_LOAD_CURRENT' => array(
              'field_data_field_sbb_question' => array(
                'value' => 'field_sbb_question_value',
                'format' => 'field_sbb_question_format',
              ),
            ),
            'FIELD_LOAD_REVISION' => array(
              'field_revision_field_sbb_question' => array(
                'value' => 'field_sbb_question_value',
                'format' => 'field_sbb_question_format',
              ),
            ),
          ),
        ),
      ),
      'foreign keys' => array(
        'format' => array(
          'table' => 'filter_format',
          'columns' => array(
            'format' => 'format',
          ),
        ),
      ),
      'indexes' => array(
        'format' => array(
          0 => 'format',
        ),
      ),
      'field_name' => 'field_sbb_question',
      'type' => 'text',
      'module' => 'text',
      'active' => '1',
      'locked' => '0',
      'cardinality' => '1',
      'deleted' => '0',
      'columns' => array(
        'value' => array(
          'type' => 'varchar',
          'length' => '255',
          'not null' => FALSE,
        ),
        'format' => array(
          'type' => 'varchar',
          'length' => 255,
          'not null' => FALSE,
        ),
      ),
      'bundles' => array(
        'node' => array(
          0 => 'spam_bot_blocker',
        ),
      ),
    ),

  );
} // ===== End installed Fields ============

/**
 * Implementation of hook_installed_instances
 */
function _spam_bot_blocker_installed_instances() {
  $t = get_t();
  return array(
  
     'field_sbb_possible_answers' => array(
        'label' => 'Possible Answers',
        'widget' => array(
          'weight' => '3',
          'type' => 'text_textfield',
          'module' => 'text',
          'active' => 1,
          'settings' => array(
            'size' => '60',
          ),
        ),
        'settings' => array(
          'text_processing' => '0',
          'user_register_form' => FALSE,
        ),
        'display' => array(
          'default' => array(
            'label' => 'above',
            'type' => 'text_default',
            'settings' => array(),
            'module' => 'text',
            'weight' => 5,
          ),
          'teaser' => array(
            'type' => 'hidden',
            'label' => 'above',
            'settings' => array(),
            'weight' => 0,
          ),
        ),
        'required' => 1,
        'description' => 'A "list" of possible answers each separated by a comma<br />
Example: dog,cat,The House,A man,2,twenty Six and 1,running',
        'default_value' => NULL,
        'field_name' => 'field_sbb_possible_answers',
        'entity_type' => 'node',
        'bundle' => 'spam_bot_blocker',
        'deleted' => '0',
    ),
    'field_sbb_correct_answer' => array(
        'label' => 'Correct Answer',
        'widget' => array(
          'weight' => '4',
          'type' => 'text_textfield',
          'module' => 'text',
          'active' => 1,
          'settings' => array(
            'size' => '60',
          ),
        ),
        'settings' => array(
          'text_processing' => '0',
          'user_register_form' => FALSE,
        ),
        'display' => array(
          'default' => array(
            'label' => 'above',
            'type' => 'text_default',
            'settings' => array(),
            'module' => 'text',
            'weight' => 3,
          ),
          'teaser' => array(
            'type' => 'hidden',
            'label' => 'above',
            'settings' => array(),
            'weight' => 0,
          ),
        ),
        'required' => 1,
        'description' => 'Enter the "Correct" answer (from your "Question" above).  This text must EXACTLY MATCH the same as one of the "Answers" above (best to copy paste what you typed above).',
        'default_value' => NULL,
        'field_name' => 'field_sbb_correct_answer',
        'entity_type' => 'node',
        'bundle' => 'spam_bot_blocker',
        'deleted' => '0',
    ),
    'field_sbb_image' => array(
        'label' => 'Image',
        'widget' => array(
          'weight' => '1',
          'type' => 'image_image',
          'module' => 'image',
          'active' => 1,
          'settings' => array(
            'progress_indicator' => 'throbber',
            'preview_image_style' => 'thumbnail',
          ),
        ),
        'settings' => array(
          'file_directory' => 'spam_bot_blocker',
          'file_extensions' => 'png gif jpg jpeg',
          'max_filesize' => '12 MB',
          'max_resolution' => '',
          'min_resolution' => '',
          'alt_field' => 0,
          'title_field' => 0,
          'default_image' => 0,
          'user_register_form' => FALSE,
        ),
        'display' => array(
          'default' => array(
            'label' => 'above',
            'type' => 'image',
            'settings' => array(
              'image_style' => '',
              'image_link' => '',
            ),
            'module' => 'image',
            'weight' => 1,
          ),
          'teaser' => array(
            'type' => 'hidden',
            'label' => 'above',
            'settings' => array(),
            'weight' => 0,
          ),
        ),
        'required' => 1,
        'description' => 'Upload an image that will be used to ask the CAPTCHA question. This image should be exactly 300 pixels wide by 250 pixels high. If it is not these dimensions it will be automatically "scaled" to fit these dimensions. You may add a "Cropper" module to this Backdrop Site and this field to make it easy to upload any image size then "Crop" it. See "Configuration > People > CAPTCHA > Spam Bot Blocker > Help" for more details on how to do this.',
        'field_name' => 'field_sbb_image',
        'entity_type' => 'node',
        'bundle' => 'spam_bot_blocker',
        'deleted' => '0',
    ),
    'field_sbb_question' => array(
        'label' => 'Question',
        'widget' => array(
          'weight' => '2',
          'type' => 'text_textfield',
          'module' => 'text',
          'active' => 1,
          'settings' => array(
            'size' => '60',
          ),
        ),
        'settings' => array(
          'text_processing' => '0',
          'user_register_form' => FALSE,
        ),
        'display' => array(
          'default' => array(
            'label' => 'above',
            'type' => 'text_default',
            'settings' => array(),
            'module' => 'text',
            'weight' => 4,
          ),
          'teaser' => array(
            'type' => 'hidden',
            'label' => 'above',
            'settings' => array(),
            'weight' => 0,
          ),
        ),
        'required' => 1,
        'description' => 'Please "Ask a question" which will need to be answered about the image',
        'default_value' => NULL,
        'field_name' => 'field_sbb_question',
        'entity_type' => 'node',
        'bundle' => 'spam_bot_blocker',
        'deleted' => '0',
    ),
);
} // ===== End installed instances


/**
 * Implementation of hook_uninstall
 */
function spam_bot_blocker_uninstall() {

  $machine_name = 'spam_bot_blocker';

  // gather all job nodes created
  $sql = 'SELECT nid FROM {node} n WHERE n.type = :type';
  $result = db_query($sql, array(':type' => $machine_name));
  $nids = array();
  foreach ($result as $row) {
  $nids[] = $row->nid;
  }

  // delete all the job nodes at once
  node_delete_multiple($nids);

  // find all fields and delete them
  foreach (array_keys(_spam_bot_blocker_installed_fields()) as $field) {
  field_delete_field($field);
  }

  // find all fields and delete instance
  $instances = field_info_instances('node', $machine_name);
  foreach ($instances as $instance_name => $instance) {
  field_delete_instance($instance);
  }

  // delete our content type
  node_type_delete($machine_name);

  // purge all field infromation
  field_purge_batch(1000);

	
/*
Not Needed in BackDrop, no more variables
  // Delete variables
  $variables = array(
    'spam_bot_blocker_fails',
    'spam_bot_blocker_purge_deny',
    'spam_bot_blocker_redirect_type',
    'spam_bot_blocker_redirect',
    'spam_bot_blocker_use_honey',
    'spam_bot_blocker_honey_name',
    'spam_bot_blocker_use_ban',
    'spam_bot_blocker_max_fails_ban',
    'spam_bot_blocker_redirect_ban_type',
    'spam_bot_blocker_redirect_ban',
    'spam_bot_blocker_use_cdn',
    'spam_bot_blocker_cnd_site_key',
    'spam_bot_blocker_cdn_language',
    'spam_bot_blocker_expose_errors',
  );
//    'spam_bot_blocker_cdn_categories',  
  
  foreach ($variables as $variable) {
  variable_del($variable);
  }
*/
  //    'spam_bot_blocker_bootstrap_3',

  backdrop_uninstall_schema('spam_bot_blocker');
  
  //db_query("DELETE FROM {variable} WHERE name LIKE 'spam_bot_blocker_%'");
/*
Not Needed in BackDrop, no more variables
  db_delete('variable')
    ->condition('name', 'spam_bot_blocker_%', 'LIKE')
    ->execute();
*/
  //cache_clear_all('variables', 'cache');  
  cache_clear_all();
} // ===== End function uninstall ============


/**
 * Implements custom function().
 *
 * Copy and Rename if Exists:
 * Copies a file but checks to see if already
 * exists and if does "Archives" old file first
 * 
 */
function spam_bot_blocker_bs_copy_and_rename_if_exists($a, $b, $c) {
  // Check to see if directory exists
  // if not, create it
  if (!file_exists($c)) {
    if (!mkdir($c, 0700, TRUE)) {
      $html .= '<p class="red">Directory not made</p>';
    }
  }
  $bs_time_stamp = time();
  $bs_time_stamp = '_old_' . date('Y\-m\-d\_H\-i\-s', $bs_time_stamp);
  if (file_exists($c . '/' . $a)) {
    $renamed_file = $c . '/' . $a;
    $parts = explode('.', $renamed_file);
    $renamed_file = $parts[0] . $bs_time_stamp . '.' . $parts[1];
    if (isset($parts[2])) {
      $renamed_file = $renamed_file . '.' . $parts[2];
    }
    copy($c . '/' . $a, $renamed_file);
  }
  // Finally, copy the file over
  copy($b . '/' . $a, $c . '/' . $a);
} // End function
// END BSCopyAndRenameIfExists ================